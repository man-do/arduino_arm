// Generated by gencpp from file arduino_arm_control/jointCmd.msg
// DO NOT EDIT!


#ifndef ARDUINO_ARM_CONTROL_MESSAGE_JOINTCMD_H
#define ARDUINO_ARM_CONTROL_MESSAGE_JOINTCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino_arm_control
{
template <class ContainerAllocator>
struct jointCmd_
{
  typedef jointCmd_<ContainerAllocator> Type;

  jointCmd_()
    : vel()
    , angle()
    , msg_ctr(0)  {
      vel.assign(0.0);

      angle.assign(0.0);
  }
  jointCmd_(const ContainerAllocator& _alloc)
    : vel()
    , angle()
    , msg_ctr(0)  {
  (void)_alloc;
      vel.assign(0.0);

      angle.assign(0.0);
  }



   typedef boost::array<float, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 3>  _angle_type;
  _angle_type angle;

   typedef uint32_t _msg_ctr_type;
  _msg_ctr_type msg_ctr;





  typedef boost::shared_ptr< ::arduino_arm_control::jointCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_arm_control::jointCmd_<ContainerAllocator> const> ConstPtr;

}; // struct jointCmd_

typedef ::arduino_arm_control::jointCmd_<std::allocator<void> > jointCmd;

typedef boost::shared_ptr< ::arduino_arm_control::jointCmd > jointCmdPtr;
typedef boost::shared_ptr< ::arduino_arm_control::jointCmd const> jointCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino_arm_control::jointCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino_arm_control::jointCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arduino_arm_control::jointCmd_<ContainerAllocator1> & lhs, const ::arduino_arm_control::jointCmd_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel &&
    lhs.angle == rhs.angle &&
    lhs.msg_ctr == rhs.msg_ctr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arduino_arm_control::jointCmd_<ContainerAllocator1> & lhs, const ::arduino_arm_control::jointCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arduino_arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_arm_control::jointCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_arm_control::jointCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_arm_control::jointCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9e54d2ce9916138a4992d6300c80c4c";
  }

  static const char* value(const ::arduino_arm_control::jointCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9e54d2ce9916138ULL;
  static const uint64_t static_value2 = 0xa4992d6300c80c4cULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino_arm_control/jointCmd";
  }

  static const char* value(const ::arduino_arm_control::jointCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] vel #deg/s\n"
"float32[3] angle #deg\n"
"uint32 msg_ctr # count sent msgs to detected missed messages\n"
;
  }

  static const char* value(const ::arduino_arm_control::jointCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
      stream.next(m.angle);
      stream.next(m.msg_ctr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_arm_control::jointCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino_arm_control::jointCmd_<ContainerAllocator>& v)
  {
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "msg_ctr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_ctr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_ARM_CONTROL_MESSAGE_JOINTCMD_H
