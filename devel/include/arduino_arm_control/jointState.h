// Generated by gencpp from file arduino_arm_control/jointState.msg
// DO NOT EDIT!


#ifndef ARDUINO_ARM_CONTROL_MESSAGE_JOINTSTATE_H
#define ARDUINO_ARM_CONTROL_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino_arm_control
{
template <class ContainerAllocator>
struct jointState_
{
  typedef jointState_<ContainerAllocator> Type;

  jointState_()
    : angle()
    , vel()  {
      angle.assign(0.0);

      vel.assign(0.0);
  }
  jointState_(const ContainerAllocator& _alloc)
    : angle()
    , vel()  {
  (void)_alloc;
      angle.assign(0.0);

      vel.assign(0.0);
  }



   typedef boost::array<float, 3>  _angle_type;
  _angle_type angle;

   typedef boost::array<float, 3>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::arduino_arm_control::jointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_arm_control::jointState_<ContainerAllocator> const> ConstPtr;

}; // struct jointState_

typedef ::arduino_arm_control::jointState_<std::allocator<void> > jointState;

typedef boost::shared_ptr< ::arduino_arm_control::jointState > jointStatePtr;
typedef boost::shared_ptr< ::arduino_arm_control::jointState const> jointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino_arm_control::jointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino_arm_control::jointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arduino_arm_control::jointState_<ContainerAllocator1> & lhs, const ::arduino_arm_control::jointState_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.vel == rhs.vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arduino_arm_control::jointState_<ContainerAllocator1> & lhs, const ::arduino_arm_control::jointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arduino_arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arduino_arm_control::jointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_arm_control::jointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_arm_control::jointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_arm_control::jointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_arm_control::jointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_arm_control::jointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino_arm_control::jointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83437f1ff145bcfd3c05b464bdbb43d7";
  }

  static const char* value(const ::arduino_arm_control::jointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83437f1ff145bcfdULL;
  static const uint64_t static_value2 = 0x3c05b464bdbb43d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_arm_control::jointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino_arm_control/jointState";
  }

  static const char* value(const ::arduino_arm_control::jointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino_arm_control::jointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header \n"
"float32[3] angle # degrees\n"
"float32[3] vel # deg/s\n"
;
  }

  static const char* value(const ::arduino_arm_control::jointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino_arm_control::jointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_arm_control::jointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino_arm_control::jointState_<ContainerAllocator>& v)
  {
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_ARM_CONTROL_MESSAGE_JOINTSTATE_H
